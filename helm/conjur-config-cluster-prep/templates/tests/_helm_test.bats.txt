# Define a Helm named template so that this BATS script can be included
# in a Helm test ConfigMap. This can be left commented out; Helm will
# still be able to find this template, and this file can be kept as
# valid BATS syntax.
#
{{- define "kube-cluster-prep.helm-test.bats" }}
#!/usr/bin/env bats

# Run out of same directory in which this script resides
cd "/tests"
source "./utils.sh"

source "/bats/bats-support/load.bash"
source "/bats/bats-assert/load.bash"
source "/bats/bats-file/load.bash"

readonly ACCESS_TOKEN_FILE="/run/conjur/access-token"
readonly AUTHN_LOG_FILE="/run/conjur/authn-logs.txt"
readonly TEMP_INFO_FILE="/info.txt"
readonly AUTHN_TIMEOUT_SECS=5

# Baseline BATS test result color
text_color "$MAGENTA"

@test "Conjur Appliance URL is a reachable address" {
  cmd=(curl -k --connect-timeout 5 "$conjurApplianceUrl":443)
  display_info "Running ${cmd[@]}"
  run "${cmd[@]}"
  if [ "$status" -ne 0 ]; then
    display_error "Please check configured Conjur Appliance URL.\n" \
                  "It is not reachable via 'curl -k'"
  fi
  assert_success
}

{{- if .Values.test.authentication.enable }}

@test "Conjur authenticator sidecar has successfully retrieved an API token" {
  display_info "Checking for existence of access token at '$ACCESS_TOKEN_FILE'"
  secs=0
  until [ "$secs" -ge "$AUTHN_TIMEOUT_SECS" ]
  status=0
  do
    echo "Checking for existence of authn token at $ACCESS_TOKEN_FILE"
    test -f "$ACCESS_TOKEN_FILE" || status="$?"
    if [ "$status" -eq 0 ]; then
      break
    fi
    secs=$((secs+1))
    echo "$n"
    sleep 1
  done
  if [ "$status" -ne 0 ]; then
    display_error "The authenticator sidecar was not able to authenticate\n" \
                  "with Conjur. Check that your Conjur policy contains the\n" \
                  "required validator host ID with the command:\n" \
                  "  conjur list -k host -s conjur/authn-k8s/{{ .Values.authnK8s.authenticatorID }}/{{ .Values.test.authentication.validatorID }}\n"
  fi
  assert_success
}

@test "CAKC028 error code does not appear in authenticator logs" {
  error_code="CAKC028"
  display_info "Checking for existence of error code $error_code in authenticator logs"
  run grep "$error_code" "$AUTHN_LOG_FILE"
  if [ "$status" -eq 0 ]; then
    display_error "The authenticator returns the following error:\n" \
      "$output\n" \
      "This means that Subject names in the Conjur's SSL certificate\n" \
      "does not include the domain name in the configured Conjur Appliance\n" \
      "URL: $conjurApplianceUrl\n" \
      "Please check that the configured Conjur Appliance URL is correct."
  fi
  # Failure of the grep command is success in this case 
  assert_failure
}
{{- end }}

@test "Conjur Account is valid" {
  display_info "Validating account from the info endpoint for enterprise"

  cmd=( curl -k --connect-timeout 5 "$conjurApplianceUrl"/info -o "$TEMP_INFO_FILE")
  display_info "Running ${cmd[@]}"
  "${cmd[@]}"
  run grep account.*"$conjurAccount" "$TEMP_INFO_FILE"

  if [ "$status" -ne 0 ]; then
    if (grep account "$TEMP_INFO_FILE"); then
        display_error "Please check the configured Conjur Account.\n" \
                      "It does not match with values from the info endpoint."
    else
        skip "test due to the info endpoint is not available for OSS"
    fi
  fi
  assert_success
}

@test "Conjur Authenticator is valid" {
  display_info "Validating authenticator ID from the info endpoint for enterprise"

  cmd=( curl -k --connect-timeout 5 "$conjurApplianceUrl"/info -o "$TEMP_INFO_FILE")
  display_info "Running ${cmd[@]}"
  run "${cmd[@]}"
  run grep name.*"$authnK8sAuthenticatorID" "$TEMP_INFO_FILE"

  if [ "$status" -ne 0 ]; then
    if (grep name "$TEMP_INFO_FILE"); then
        display_error "Please check configured authenticator ID\n" \
                      "It does not match with values from the info endpoint."
    else
        skip "test due to the info endpoint is not available for OSS"
    fi
  fi
  assert_success
}

{{- end }}
