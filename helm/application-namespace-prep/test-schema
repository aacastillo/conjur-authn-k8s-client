#!/bin/bash

# This script tests the restrictions on chart values
# as defined in the 'values.schema.json' file.
#
# Requirements:
#   - Helm v3.5.3 or later

cd "$(dirname "$0")"

source ../common/utils.sh

readonly MIN_HELM_VERSION="3.5.3"

readonly EXPECT_FAILURE=true

# Global test state
num_passed=0
num_failed=0
test_failed=false

function authenticator_variable_test() {
    helm lint . --strict \
        --set "authnK8s.goldenConfigMap=authn-k8s-configmap"\
        --set "authnK8s.namespace=golden"
}

function authenticator_missing_configmap_test() {
    helm lint . --strict \
        --set "authnK8s.namespace=golden"
}

function authenticator_namespace_test() {
    helm lint . --strict \
        --set "authnK8s.goldenConfigMap=authn-k8s-configmap"
}

function invert_exit_status() {
    exit_status="$1"
    if [ "$exit_status" -ne 0 ]; then
        echo 0
    else
        echo 1
    fi
}

function update_results() {
    exit_status="$1"
    failure_expected="${2:-false}"
    if [ "$failure_expected" = true ]; then
        echo "FAILURE EXPECTED"
        exit_status="$(invert_exit_status $exit_status)"
    fi
    if [ "$exit_status" -eq 0 ]; then
        color_text "$GREEN" "Test Case PASSED!"
        let "num_passed=num_passed+1"
    else
        color_text "$RED" "Test Case FAILED!"
        let "num_failed=num_failed+1"
        test_failed=true
    fi
}

function display_final_results() {
    if [ "$num_failed" -eq 0 ]; then
        result_text="Test PASSED!"
        result_color="$GREEN"
    else
        result_text="Test FAILED!"
        result_color="$RED"
    fi
    banner "$result_color" \
        "$result_text\n" \
        "   Passed test cases: $num_passed" \
        "   Failed test cases: $num_failed"
}

function check_helm_version() {
    helm_version="$(helm version --template {{.Version}} | sed 's/^v//')"
    if ! meets_min_version $helm_version $MIN_HELM_VERSION; then
        echo "helm version $helm_version is invalid. Version must be $MIN_HELM_VERSION or newer"
        exit 1
    fi
}

function main() {

    check_helm_version

    announce "Basic test with both the ConfigMap and Namespace supplied "
    authenticator_variable_test
    update_results "$?" 

    announce "ConfigMap is not set"
    authenticator_missing_configmap_test 
    update_results "$?" "$EXPECT_FAILURE"

    announce "Namespace is not set"
    authenticator_missing_namespace_test
    update_results "$?" "$EXPECT_FAILURE"

    display_final_results
}

main "$@"
